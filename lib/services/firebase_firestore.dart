

import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/problem_model.dart';

class FirebaseFirestoreService
{
  final db = FirebaseFirestore.instance;
  final bodyKeywords = ["кузов","рыжик","гниет", "бампер", "крыло", "дверь", "капот", "фара", "фонарь", "порог", "стекло", "крыша", "панель", "зеркало", "капсула", "крышка", "боковина", "салон", "поручень", "молдинг", "решетка", "дверца", "корпус", "колесо", "амортизатор", "багажник", "замок", "молдинг", "порог", "внешность", "каркас", "защита", "крепление", "поручень", "подножка", "облицовка", "внутренность", "накладка", "опора", "замаскировать", "запаска", "накладка", "крышка", "порог", "пластина", "полировать", "покраска", "шлифовка", "петля", "замок", "уплотнитель", "металл", "пластик", "стекло", "вмятина", "царапина", "скол", "ржавчина", "коррозия", "трещина", "деформация", "поломка", "люфт", "заедание", "скрип", "стук", "вибрация", "замена", "ремонт", "восстановление", "покраска", "рихтовка", "сварка", "корпус", "каркас", "рама", "шасси", "платформа", "лонжерон", "поперечина", "балка", "усилитель", "опора", "подрамник", "накладка", "кнопка", "ручка", "механизм", "датчик", "проводка", "электроника", "устройство", "система", "кузовной", "бамперный", "крыльевой", "дверной", "капотный", "оптический", "стеклянный", "зеркальный", "люковый", "шинный", "крепёжный", "соединительный", "защитный", "деформированный", "повреждённый", "ремонтный", "ABS", "ПВХ", "LED", "HID", "TPMS", "ESP", "ABS", "EBD", "body", "bumper", "fender", "door", "hood", "headlight", "taillight", "glass", "mirror", "sunroof", "tire", "antenna", "molding", "trim", "spoiler", "towbar", "shield", "mudguard", "hinge", "lock", "seal", "metal", "plastic", "glass", "dent", "scratch", "chip", "rust", "corrosion", "crack", "deformation", "breakage", "play", "binding", "creak", "knock", "vibration", "replacement", "repair", "recovery", "painting", "bodywork", "welding"];
  final engineKeywords = ["мотор", "двигатель", "коробка", "масло", "фильтр", "выхлоп", "турбо", "гудит", "шумит", "вибрация", "троит", "детонация", "перегрев", "запуск", "тяга", "мощность", "расход", "топливо", "бензин", "дизель", "газ", "инжектор", "карбюратор", "катализатор", "лямбда-зонд", "датчик", "компьютер", "ЭБУ", "прошивка", "диагностика", "ремонт", "замена", "сервис", "гарантия", "блок", "цилиндр", "поршень", "кольцо", "коленвал", "распредвал", "шатун", "вкладыш", "клапан", "гидрокомпенсатор", "маслосъемный колпачок", "головка блока", "прокладка", "коллектор", "впуск", "выпуск", "турбина", "компрессор", "интеркулер", "ремень", "цепь", "насос", "генератор", "стартер", "аккумулятор", "охлаждение", "радиатор", "патрубок", "термостат", "вентилятор", "датчик", "кондиционер", "система", "устройство", "механизм", "деталь", "компонент", "агрегат", "узел", "запчасть", "аксессуар", "тюнинг", "модификация", "улучшение", "доработка", "форсирование", "чип-тюнинг", "свап", "капитальный ремонт", "переборка", "расточка", "гильзовка", "хонингование", "шлифовка", "опрессовка", "дефектовка", "разборка", "сборка", "мойка", "чистка", "смазка", "регулировка", "настройка", "обслуживание", "уход"];
  final chassisKeywords = ["шасси", "подвеска", "амортизаторы", "пружины", "стабилизаторы", "рычаги", "подшипники", "передний мост", "задний мост", "рулевой механизм", "рулевая рейка", "рейка", "рулевая тяга", "рулевые наконечники", "рулевой карданчик", "рулевая колонка", "регулировка руля", "рулевое колесо", "тяга рулевая", "тяга рулевая регулируемая", "подшипник рулевого карданчика", "подушка рулевой рейки", "амортизатор рулевой колонки", "рулевой вал", "рулевая тяга", "рулевая тяга регулируемая", "рулевая тяга регулировочная", "переключатель рулевого столба", "переключатель рулевого вала", "рулевой трапециид", "шаровая опора", "стойка стабилизатора", "балка стабилизатора", "тяга стабилизатора", "подшипник стабилизатора", "датчик положения руля", "манжета рулевой рейки", "крестовина рулевого вала", "сальник рулевого вала", "стопорное кольцо рулевого вала", "передняя панель", "задняя панель", "рама", "корпус", "каркас", "поддон", "подрамник", "продольные балки", "поперечные балки", "боковые балки", "рамный ресурс", "бортовой ресурс", "фальшрама", "перекрытие", "опора двигателя", "опора КПП", "кронштейн двигателя", "кронштейн КПП", "поддержка двигателя", "поддержка КПП", "балка поддержки двигателя", "балка поддержки КПП", "крышка двигателя", "крышка КПП", "картер КПП", "картер двигателя", "панель двигателя", "панель КПП", "капот", "крышка багажника", "крышка багажника", "петля капота", "петля крышки багажника", "шарнир капота", "шарнир крышки багажника", "механизм фиксации капота", "механизм фиксации крышки багажника", "поддержка капота", "поддержка крышки багажника", "амортизатор капота", "амортизатор крышки багажника", "фара", "фары", "передние фонари", "задние фонари", "светодиодные фонари", "галогеновые фары", "ксеноновые фары", "ближний свет", "дальний свет", "противотуманные фары", "габаритные огни", "стоп-сигналы", "поворотники", "зеркала заднего вида", "зеркало заднего вида", "электрорегулировка зеркал", "обогрев зеркал", "корпус зеркала", "стекло зеркала", "кронштейн зеркала", "крепление зеркала", "штатное зеркало", "двери", "дверные ручки", "дверные замки", "дверные карты", "пороги", "замки зажигания", "замки дверей", "замки капота", "замки багажника", "замки бензобака", "замки запаски", "замки колес", "замки салона", "замки крышки багажника", "замки передних дверей", "замки задних дверей", "замки двери водителя", "замки двери пассажира", "замки задних боковых дверей", "замки передних боковых дверей", "замки багажника", "замки капота", "замки бензобака", "замки колес", "замки запасного колеса", "замки колесных болтов", "замки салона", "замки запасного колеса", "замки заднего стекла", "замки переднего стекла", "замки внутренней отделки", "петли дверей", "петли капота", "петли багажника", "петли колес", "петли запасного колеса", "петли салона", "петли стекол", "замки дверей водителя", "замки дверей пассажира", "замки дверей задних пассажиров", "замки дверей задних боковых"];

  String getCategory(String description) {
    final lowerDescription = description.toLowerCase();
    if (bodyKeywords.any(lowerDescription.contains)) {
      return "body";
    } else if (chassisKeywords.any(lowerDescription.contains)) {
      return "chassis";
    } else if (engineKeywords.any(lowerDescription.contains)){
      return "engine";
    }
    else {
      return "other";
    }
  }
  Future<void> createProblem({required String description})
  async {
    try {
      final problem = db.collection(getCategory(description)).doc();
      final data = {
        'id': problem.id,
        'description': description,
      };
      await problem.set(data);
    }
    catch(e)
    {
      print("Проблема - - - - - - - - - -- - - -- - - -" + e.toString());
    }
  }

  Stream<List<ProblemModel>> getProblems() {
    final problems = db.collection("body").snapshots().map(
          (snapshot) => snapshot.docs
          .map((e) => ProblemModel.fromJson(e.data()))
          .toList(),
    );

    return problems;
  }

  Stream<List<ProblemModel>> getProblemsEngine() {
    final problems = db.collection("engine").snapshots().map(
          (snapshot) => snapshot.docs
          .map((e) => ProblemModel.fromJson(e.data()))
          .toList(),
    );

    return problems;
  }

  Stream<List<ProblemModel>> getProblemsEngineChassis() {
    final problems = db.collection("chassis").snapshots().map(
          (snapshot) => snapshot.docs
          .map((e) => ProblemModel.fromJson(e.data()))
          .toList(),
    );

    return problems;
  }


  Stream<List<ProblemModel>> getProblemsOther() {
    final problems = db.collection("other").snapshots().map(
          (snapshot) => snapshot.docs
          .map((e) => ProblemModel.fromJson(e.data()))
          .toList(),
    );

    return problems;
  }

  removeFromDB(String id, String category) async {
    print("Deleting document with ID: $id");
    await db.collection(category).doc(id).delete();
  }

  Future<void> moveProblem({required String id,required String category ,required String newCategory}) async {
    try {
      final docRef = db.collection(category).doc(id);
      final data = await docRef.get();
      if (data.exists) {
        await db.collection(newCategory).doc(id).set(data.data() as Map<String, dynamic>);
        await docRef.delete();
      } else {
        print("Проблема с ID $id не найдена");
      }
    } catch (e) {
      print("Проблема при перемещении: $e");
    }
  }

  }
